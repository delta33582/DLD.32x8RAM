// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/30/2023 12:10:51"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    testcell
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module testcell_vlg_sample_tst(
	CS,
	IO,
	RS,
	RSTN,
	RWS,
	sampler_tx
);
input  CS;
input  IO;
input  RS;
input  RSTN;
input  RWS;
output sampler_tx;

reg sample;
time current_time;
always @(CS or IO or RS or RSTN or RWS)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module testcell_vlg_check_tst (
	INP,
	IO,
	OUT,
	sampler_rx
);
input  INP;
input  IO;
input  OUT;
input sampler_rx;

reg  INP_expected;
reg  IO_expected;
reg  OUT_expected;

reg  INP_prev;
reg  IO_prev;
reg  OUT_prev;

reg  INP_expected_prev;
reg  IO_expected_prev;
reg  OUT_expected_prev;

reg  last_INP_exp;
reg  last_IO_exp;
reg  last_OUT_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	INP_prev = INP;
	IO_prev = IO;
	OUT_prev = OUT;
end

// update expected /o prevs

always @(trigger)
begin
	INP_expected_prev = INP_expected;
	IO_expected_prev = IO_expected;
	OUT_expected_prev = OUT_expected;
end



// expected INP
initial
begin
	INP_expected = 1'bX;
end 

// expected OUT
initial
begin
	OUT_expected = 1'bX;
end 
// generate trigger
always @(INP_expected or INP or IO_expected or IO or OUT_expected or OUT)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected INP = %b | expected IO = %b | expected OUT = %b | ",INP_expected_prev,IO_expected_prev,OUT_expected_prev);
	$display("| real INP = %b | real IO = %b | real OUT = %b | ",INP_prev,IO_prev,OUT_prev);
`endif
	if (
		( INP_expected_prev !== 1'bx ) && ( INP_prev !== INP_expected_prev )
		&& ((INP_expected_prev !== last_INP_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INP :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INP_expected_prev);
		$display ("     Real value = %b", INP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_INP_exp = INP_expected_prev;
	end
	if (
		( IO_expected_prev !== 1'bx ) && ( IO_prev !== IO_expected_prev )
		&& ((IO_expected_prev !== last_IO_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IO :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IO_expected_prev);
		$display ("     Real value = %b", IO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IO_exp = IO_expected_prev;
	end
	if (
		( OUT_expected_prev !== 1'bx ) && ( OUT_prev !== OUT_expected_prev )
		&& ((OUT_expected_prev !== last_OUT_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_expected_prev);
		$display ("     Real value = %b", OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OUT_exp = OUT_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#8000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module testcell_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CS;
reg treg_IO;
reg RS;
reg RSTN;
reg RWS;
// wires                                               
wire INP;
wire IO;
wire OUT;

wire sampler;                             

// assign statements (if any)                          
assign IO = treg_IO;
testcell i1 (
// port map - connection between master ports and signals/registers   
	.CS(CS),
	.INP(INP),
	.IO(IO),
	.OUT(OUT),
	.RS(RS),
	.RSTN(RSTN),
	.RWS(RWS)
);

// RS
initial
begin
	RS = 1'b1;
end 

// RSTN
initial
begin
	RSTN = 1'b0;
	RSTN = #1000000 1'b1;
end 

// CS
initial
begin
	CS = 1'b1;
end 

// RWS
initial
begin
	RWS = 1'b1;
	RWS = #1000000 1'b0;
	RWS = #3000000 1'b1;
	RWS = #1000000 1'b0;
	RWS = #2000000 1'b1;
end 

// IO
initial
begin
	treg_IO = 1'b0;
	treg_IO = #1000000 1'b1;
	treg_IO = #1000000 1'b0;
	treg_IO = #1000000 1'b1;
	treg_IO = #4000000 1'b0;
end 

testcell_vlg_sample_tst tb_sample (
	.CS(CS),
	.IO(IO),
	.RS(RS),
	.RSTN(RSTN),
	.RWS(RWS),
	.sampler_tx(sampler)
);

testcell_vlg_check_tst tb_out(
	.INP(INP),
	.IO(IO),
	.OUT(OUT),
	.sampler_rx(sampler)
);
endmodule

